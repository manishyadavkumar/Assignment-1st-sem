            ASSIGNMENT VI






Submitted by:-
Manish yadav 
Level:-B.Sc(1st sem)                                          Submitted to:-
                                                                           Ashim sir
(1)What is pointer and explain its applications. Write a program that uses pointers to copy an array of double.
A pointer is a variable which contains the address in memory of another variable. We can have a pointer to any variable type.
Application of pointer
•	Pointer are more efficient data array. They are used to manipulate arrays more easily by         moving pointers to them instead of moving the arrays themselves.
•	Passing Parameter by Reference.
•	Dynamic Memory Allocation or (DMA).
•	Passing String to a function.
•	Reducing size of parameter.
•	Pointer are used to create complex data structures such as link list, trees etc.
•	Pointer increases the execution speeds.
•	Pointer are used to communicate information about memory which returns the location of free memory. E.g. Using like malloc(), calloc(),realloc(),free().

#include<stdio.h>
int reg(int *a, int n);
int copier(int *x, int *y, int z);
int main(){
	int m,i;
	printf("How many number do you want to store in the array ? : ");
	scanf("%d", &m);
	int array1[m], array2[m];
	
	reg(array1, m);
	printf("The Original Array : \n");
	for(i=0; i<m; i++){
		printf("%d\n", array1[i]);
	}
	printf("The duplicated array is : \n");
	copier(array1, array2, m);
	for(i=0; i<m; i++){
		printf("%d\n", array2[i]);
	}
	return 0;
}
int reg(int *a, int n){
	printf("Enter the numbers \n");
	for(int i=0; i<n; i++){
		scanf("%d",  &*(a+i));
	}
	return 0;
}
int copier(int *x, int *y, int z){
	for(int i=0; i<z; i++){
		*(y+i)=*(x+i);
	}
	return 0;
}
(2)Write a function that is passed with an array of n pointers which returns the maximum.
#include<stdio.h>
int max(int *a);
int main(){
	int i,array[5];
	
	printf("Enter any 5 numbers : \n");
	for(i=0; i<5; i++){
		scanf("%d", &array[i]);
	}
	/*for(i=0;i<5;i++){
		max(p+i);
	}*/
	printf("The maximum no is : %d", max(array));
	return 0;
}

int max(int *a){
	int counter=0;
	for(int i=0; i<5; i++){
		for(int j=0; j<5; j++){
			if(*(a+i)>=*(a+j)){
				counter++;
			}
	//printf("%d", counter);
		}
		if(counter==5){
			return *(a+i);
			//printf("\n%d is the greatest of them all", *(a+i));
			break;
		}
		counter=0;
	}
	//printf("This function was called");
	return 0;
}

(3)Justify that pointer is jewel in C language. Write a function that is passed an array of n pointers to floats and returns a newly created array that contains those n float values in reverse order. Assume any necessary data.
A Pointer is a variable that contains address of other variables i.e. a variable that pointer to the location of data item. It provides a way of accessing a variable without referring to the variable directly. It uses the address of the variable. The pointer is called jewel of C language because the real power of C lies in the proper use of pointer. This helps in flexible manipulation of the data and memory as well.
//Write a function that passes an array of n pointers to floats and returns a newly created array that contains those n floats in revers order.
#include<stdio.h>

void rev(float *a, float *b, int n);

int main(){
	int n,i;
	printf("Enter the limit of the array : ");
	scanf("%d", &n);
	float array1[n],array2[n];
	//where array1 is the orginal Array and The array2 is the Copied and Reversed Array
	
	printf("Enter the numbers in the array : \n");
	for(i=0; i<n; i++){
		scanf("%f",  &array1[i]);
	}
	printf("This is the original Array with their corresponding address\n");
	printf("Element\t\t\t\tAddress\n");
	for(i=0; i<n; i++){
		printf("%f\t\t\t%u\n", array1[i],  (array1+i));
	}
	
	rev(array1, array2, n);
	return 0;
}
void rev(float *a,float *b, int n){
	int i, j=n-1;
	for(i=0; i<n; i++){
		*(b+j) = *(a+i);
		--j;
	}
	printf("The elements in the new array is : \nElement\t\t\t\tAddress\n");
	for(i=0; i<n; i++){
		printf("%f\t\t\t%u\n", *(b+i), (b+i));
		//printf("%f\t\t%u\n", *(a+i), (a+i));
	}
}
(4)Write a function that uses pointers to search for the address of a given integer in a given array. If the given integer is found, the function returns its address; otherwise it returns NULL.
//WAP that uses pointers to search for the address of a given integer in an givern array. If the given intefer is found, the function return its address, otherwirse it returns  NULL.
#include<stdio.h>

int* search(int *a, int s);

int main(){
	int array[10], s, i;
	printf("Enter the numbers in the array : \n");
	for(i=0;i<10;i++){
		scanf("%d", &array[i]);
	}
	printf("Address of which number do you want ? : ");
	scanf("%d", &s);
	printf("NUMBER\t\t\t\tADDRESS\n");
	printf("%d\t\t\t\t%p", *search(array, s), search(array, s));
	return 0;
}

int* search(int *a, int s){
	int i,counter=0;
	
	for(i=0; i<10; i++){
		if(s==*(a+i)){
			//printf("%d\t\t\t\t%u", *(a+i), (a+i));
			return (a+i);
		}
		if(s!=*(a+i)){
			counter++;
		}
	}
	if(counter==10){
		printf("NULL");
		return 0;
	}
	return 0;
}
(5)Write a program that uses pointers to copy an array of integer.
//WAP that uses pointer to copy an array of integer
#include<stdio.h>
int reg(int *a, int n);
int copier(int *x, int *y, int z);
int main(){
	int m,i;
	printf("How many number do you want to store in the array ? : ");
	scanf("%d", &m);
	int array1[m], array2[m];
	
	reg(array1, m);
	printf("The Original Array : \n");
	for(i=0; i<m; i++){
		printf("%d\n", array1[i]);
	}
	printf("The duplicated array is : \n");
	copier(array1, array2, m);
	for(i=0; i<m; i++){
		printf("%d\n", array2[i]);
	}
	return 0;
}
int reg(int *a, int n){
	printf("Enter the numbers \n");
	for(int i=0; i<n; i++){
		scanf("%d",  &*(a+i));
	}
	return 0;
}
int copier(int *x, int *y, int z){
	for(int i=0; i<z; i++){
		*(y+i)=*(x+i);
	}
	return 0;
}
(6)Write a function that is passed an array of n pointer to floats and returns a newly created array that contains those n float values.
//Write a function that passes an array of n pointers to floats and returns a newly created array that contains those n floats in revers order.
#include<stdio.h>

void rev(float *a, float *b, int n);

int main(){
	int n,i;
	printf("Enter the limit of the array : ");
	scanf("%d", &n);
	float array1[n],array2[n];
	//where array1 is the orginal Array and The array2 is the Copied and Reversed Array
	
	printf("Enter the numbers in the array : \n");
	for(i=0; i<n; i++){
		scanf("%f",  &array1[i]);
	}
	printf("This is the original Array with their corresponding address\n");
	printf("Element\t\t\t\tAddress\n");
	for(i=0; i<n; i++){
		printf("%f\t\t\t%u\n", array1[i],  (array1+i));
	}
	
	rev(array1, array2, n);
	return 0;
}
void rev(float *a,float *b, int n){
	int i, j=n-1;
	for(i=0; i<n; i++){
		*(b+j) = *(a+i);
		--j;
	}
	printf("The elements in the new array is : \nElement\t\t\t\tAddress\n");
	for(i=0; i<n; i++){
		printf("%f\t\t\t%u\n", *(b+i), (b+i));
		//printf("%f\t\t%u\n", *(a+i), (a+i));
	}
}
(7)Explain the pointer to structure with example.
1.	Address of Pointer variable can be obtained using ‘&’ operator.
2.	Address of such Structure can be assigned to the Pointer variable.
3.	Pointer Variable which stores the address of Structure must be declared as Pointer to Structure.
-	Basically a pointer to a structure means to user pointer to access and manipulate data/memory of the structure.
Syntax for Pointer to Structure: 

/*PROGRAM EXAMPLE*/


#include <stdio.h>
int main()
{
          struct student_database
{
    char name[10];
    int roll;							
    int marks;
}stud1;								

stud1.roll = 10;
stud1.marks = 90;

printf("Roll Number : %d\n",stud1.roll);
printf("Marks of Student : %d\n",stud1.marks);

return 0;
}
(8)Explain the pointer arithmetic with example.
A pointer in c is an address, which is a numeric value. Therefore, you can perform arithmetic operations on a pointer just as you can on a numeric value. There are four arithmetic operators that can be used on pointers: ++, --, +, and -
To understand pointer arithmetic, let us consider that ptr is an integer pointer which points to the address 1000. Assuming 32-bit integers, let us perform the following arithmetic operation on the pointer –
Ptr++
After the above operation, the ptr will point to the location 1004 because each time ptr is incremented, it will point to the next integer location which is 4 bytes next to the current location. This operation will move the pointer to the next memory location without impacting the actual value at the memory location. If ptr points to a character whose address is 1000, then the above operation will point to the location 1001 because the next character will be available at 1001.
(9)Write a program to sort 'n' numbers in ascending order using dynamic memory.
//WAP to sort n numbers in ascending order using DMA
#include<stdio.h>
#include<stdlib.h>
int main(){
	int i,j,temp, *a=NULL, n;
	printf("Enter the size of the array you want : ");
	scanf("%d", &n);
	
	a=(int*)malloc(n*sizeof(int));
	printf("Enter the numbers one bye one : \n");
	for(i=0; i<n; i++){
		scanf("%d", (a+i));
	}
	
	//ascending
	
	for(i=0; i<n; i++){
		for(j=0; j<n; j++){
			if(*(a+i)<*(a+j)){
				temp=*(a+i);
				*(a+i)=*(a+j);
				*(a+j)=temp;
			}
		}
	}
	printf("The arranged order is : \n");
	for(i=0; i<n; i++){
		printf("%d\n", *(a+i));
	}
	
 return 0;
 }
(10)What is dynamic memory allocation (DMA)? How can you use it in C?
C dynamic memory allocation refers to performing manual memory management for dynamic memory allocation in the C programming language via a group of functions in the C standard library, namely malloc, realloc, calloc and free.
Although, C language inherently does not have any technique to allocate memory dynamically, there are 4 library functions under "stdlib.h" for dynamic memory allocation.
Function       Use of function
Malloc():-  Allocates requested size of bytes and returns a pointer first byte of allocated space.
Calloc():- Allocates space for an array elements, initializes to zero and then returns a pointer to memory.
Free():- deallocate the previously allocated space.
Raelloc():-Change the size of previously allocated space. 
Now, for example
Syntax of malloc
Ptr=(cast-type*) malloc(byte-size)
(11)What are the advantages of dynamic memory allocation over static memory allocation?
When main memory is allocated statically it cannot be altered during the execution of program. When main memory is allocated dynamically it can be altered during the execution of program as per the user wish.
The length of dynamically allocated memory either can be decreased or increased
In case of dynamically created lists insertions and deletions can be done very easily just by the manipulation of addresses whereas in case of statically allocated memory insertions and deletions lead to more number of movements and wastage of memory.
In case of statically allocated memory there is every chance of “overflow”  during insertions in the lists, whereas in case of dynamically allocated memory it does not come into picture unless otherwise unavailability of main memory.
(12)How is malloc() function different from calloc() function?
malloc	calloc
The name malloc stands for memory allocation.	The name calloc stands for contiguous allocation.
void *malloc(size_t n) returns a pointer to n bytes of uninitialized storage, or NULL if the request cannot be satisfied. If the space assigned by malloc() is overrun, the results are undefined.	void *calloc(size_t n, size_t size)returns a pointer to enough free space for an array of n objects of the specified size, or NULL if the request cannot be satisfied. The storage is initialized to zero.
malloc() takes one argument that is, number of bytes.	calloc() take two arguments those are: number of blocks and size of each block.
syntax of malloc():
void *malloc(size_t n);
Allocates n bytes of memory. If the allocation succeeds, a void pointer to the allocated memory is returned. Otherwise NULL is returned.	syntax of calloc():
void *calloc(size_t n, size_t size);
Allocates a contiguous block of memory large enough to hold n elements of sizebytes each. The allocated region is initialized to zero.
malloc is faster than calloc.	calloc takes little longer than mallocbecause of the extra step of initializing the allocated memory by zero. However, in practice the difference in speed is very tiny and not recognizable.

(13)Write a program to read number of employees,n, working in a company. Reserve the memory required to store age of n employees using malloc() function. Read age of n employees from user and count the number of employees of age above 80 years.
//To read n no. of employes and give them age then count how many are above 80
#include<stdio.h>
#include<stdlib.h>
#include<conio.h>
int main(){
	
	int *age=NULL, i,j,n,count=0;
	printf("How many Employes do you want to have ? ");
	scanf("%d", &n);
	char nam, name[n][30],p;
	age=(int*)malloc(n*sizeof(int));
	//name=(char*)malloc(n*sizeof(char));
	
	printf("now fill up \n");
	
	for(i=0; i<n; i++){
		printf("Enter the name of the Employe : ");
		for(j=0; j<30; j++){
			nam = getch();
			
			if(nam==13){
				break;
			}
			
			name[i][j] = nam;
			putch(nam);
			
			//scanf("%s", &name[i][30]);
		}
		printf("\tEnter his/her Age : ");
		scanf("%d", (age+i));
	}
	printf("Name\t\tAge");
	printf("\n");
	for(i=0; i<n; i++){
		for(j=0; p!='\0'; j++){
			printf("%c", name[i][j]);
			p = name[i][j];
		}
		p='a';
		printf("\t\t%d", *(age+i));
		printf("\n");
	}
	
	
	for(i=0;i<n;i++){
		if(age[i]>=80){
			count++;
		}
	}
	printf("Among them %d are above 80 years old", count);	
	printf("\nName\t\tAge\n");
	for(i=0;i<n;i++){
		if(age[i]>=80){
			for(j=0;p!=0;j++){
				printf("%c", name[i][j]);
				p = name[i][j];
			}
			p='a';
			printf("\t\t%d", *(age+i));
			printf("\n");
			
		}
	}
	
 return 0;
}
(14)Write a program to read a matrix of size m*n entered by the user and display its transpose matrix. Use Dynamic Memory Allocation.
//To read a m*n matrix entered by the user and display it's transpose using DMA
#include<stdio.h>
#include<stdlib.h>
int transpose(int**,int,int);
int main(){
	int m,n,i,j;
	printf("Please enter the dimension of the matrix (m*n): ");
	scanf("%d", &m);
	scanf("%d", &n);
	int **matrix;
	matrix=(int**)malloc(sizeof(int*)*m);
	matrix[0]=(int*)malloc(sizeof(int)*n*m);
	for(i=0; i<m; i++){
		matrix[i]=(*matrix + n*i);	//(int*)malloc(sizeof(int)*n);
	}
	printf("Enter the number is matrix");
	for(i=0; i<m; i++){
		printf("\nEnter the numbers in row %d :", i+1);
		for(j=0; j<n; j++){
			scanf("%d", &*(*(matrix+i)+j));
		}
	}
	
	
	printf("\nOriginal Matrix:\n");
	for(i=0; i<m; i++){
		for(j=0; j<n; j++){
			printf("%d\t", *(*(matrix+i)+j));
		}
		printf("\n");
	}
	
	transpose(matrix,m,n);
	
	return 0;
}

int transpose(int** matrix,int m,int n){
	int i,j;
	printf("\nTransposed Matrix\n");
	for(i=0; i<m; i++){
		for(j=0; j<n; j++){
			printf("%d\t", *(*(matrix+j)+i));
		}
		printf("\n");
	}
	return 0;
}
